// stylelint-disable declaration-property-value-blacklist

// RFS mixin.
//
// Automated font-resizing.
//
// See https://github.com/MartijnCuppens/rfs.

// Configuration.

// Minimum fontsize.
@rfs-minimum-font-size: 1rem;
@rfs-font-size-unit: rem;

// Breakpoint at where font-size starts decreasing if screen width is smaller.
@rfs-breakpoint: 1200px;
@rfs-breakpoint-unit: px;

// Resize font-size based on screen height and width.
@rfs-two-dimensional: false;

// Factor of decrease.
@rfs-factor: 5;

// Generate disable classes
@rfs-generate-disable-classes: true;

// 1 rem = @rfs-rem-value px.
@rfs-rem-value: 16;

// Disable RFS by setting @enable-responsive-font-sizes to false.
@enable-responsive-font-sizes: true;

// Responsive font-size mixin.
.rfs(@fs, @important: false) {

  // Remove px-unit from @rfs-minimum-font-size for calculations.
  & when (get-unit(@rfs-minimum-font-size) = px) {
    @rfs-minimum-font-size: @rfs-minimum-font-size / (@rfs-minimum-font-size * 0 + 1);
  }
  & when (get-unit(@rfs-minimum-font-size) = rem) {
    @rfs-minimum-font-size: @rfs-minimum-font-size / (@rfs-minimum-font-size * 0 + (1 / @rfs-rem-value));
  }

  // Remove unit from @rfs-breakpoint for calculations.
  & when (get-unit(@rfs-breakpoint) = px) {
    @rfs-breakpoint: @rfs-breakpoint / (@rfs-breakpoint * 0 + 1);
  }
  & when ((get-unit(@rfs-breakpoint) = rem) or (get-unit(@rfs-breakpoint) = "em")) {
    @rfs-breakpoint: @rfs-breakpoint / (@rfs-breakpoint * 0 + (1 / @rfs-rem-value));
  }

  & when (@enable-responsive-font-sizes = false ) {
    // If @rfs-factor is set to 1, fluid font-resizing is disabled.
    @rfs-factor: 1;
  }

  @rfs-suffix: "";

  // Add !important suffix if needed.
  & when (@important) {
    @rfs-suffix: " !important";
  }

  // If @fs isn't a number (like inherit) or @fs has a unit (not px or rem, like 1.5em) or @ is 0, just print the value.
  & when (not(isnumber(@fs) or isunit(@fs,px) or isunit(@fs,rem))) {
    font-size: @fs @rfs-suffix;
  }
  & when ((isnumber(@fs)) or (isunit(@fs,px)) or (isunit(@fs,rem))) {

    // Variables for storing static and fluid rescaling.
    @rfs-static: null;
    @rfs-fluid: null;

    // Remove px-unit from @fs for calculations.
    & when (isunit(@fs, px)) {
      @fs: @fs / (@fs * 0 + 1);
    }
    & when (isunit(@fs, rem)) {
      @fs: @fs / (@fs * 0 + (1 / @rfs-rem-value));
    }

    // Set default font-size.
    & when (@rfs-font-size-unit = rem) {
      @rfs-static: @fs / @rfs-rem-value * 1rem @rfs-suffix;
    }
    & when (@rfs-font-size-unit = px) {
      @rfs-static: @fs * 1px @rfs-suffix;
    }

    // Only add media query if font-size is bigger as the minimum font-size.
    // If @rfs-factor == 1, no rescaling will take place.
    & when ((@fs > @rfs-minimum-font-size) and (@rfs-factor > 1)) {
      @min-width: null;
      @variable-unit: null;

      // Calculate minimum font-size for given font-size.
      @fs-min: @rfs-minimum-font-size + (@fs - @rfs-minimum-font-size) / @rfs-factor;
      // Calculate difference between given font-size and minimum font-size for given font-size.
      @fs-diff: @fs - @fs-min;

      // Minimum font-size formatting.
      // No need to check if the unit is valid, because we did that before.
      & when (@rfs-font-size-unit = rem) {
        @min-width: (@fs-min / @rfs-rem-value)rem;
      }
      & when (@rfs-font-size-unit = px) {
        @min-width: (@fs-min)px;
      }

      // If two-dimensional, use smallest of screen width and height.
      & when (@rfs-two-dimensional) {
        @variable-unit: vmin;
      }
      & when (not(@rfs-two-dimensional)) {
        @variable-unit: vw;
      }

      // Calculate the variable width between 0 and @rfs-breakpoint.
      @variable-width: (@fs-diff * 100 / @rfs-breakpoint)@variable-unit;

      // Set the calculated font-size.
      @rfs-fluid: calc(@min-width + @variable-width) @rfs-suffix;
    }

    // Rendering.
    & when (@rfs-fluid = null) {
      // Only render static font-size if no fluid font-size is available.
      font-size: @rfs-static;
    }
    & when (not(@rfs-fluid = null)) {
      @mq-value: null;

      // RFS breakpoint formatting.
      & when ((@rfs-breakpoint-unit = em) or (@rfs-breakpoint-unit  = rem)) {
        @mq-value: (@rfs-breakpoint / @rfs-rem-value)@rfs-breakpoint-unit;
      }
      & when (@rfs-breakpoint-unit = px) {
        @mq-value: (@rfs-breakpoint)px;
      }

      & when (@rfs-generate-disable-classes) {
        // Adding an extra class increases specificity,
        // which prevents the media query to override the font size
        &,
        .disable-responsive-font-size &,
        &.disable-responsive-font-size {
          font-size: @rfs-static;
        }
      }
      & when (@rfs-generate-disable-classes = false) {
        font-size: @rfs-static;
      }

      & when (@rfs-two-dimensional) {
        @media (max-width: @mq-value), (max-height: @mq-value) {
          font-size: @rfs-fluid;
        }
      }
      & when (@rfs-two-dimensional = false) {
        @media (max-width: @mq-value) {
          font-size: @rfs-fluid;
        }
      }
    }
  }
}

// The responsive-font-size mixin uses RFS to rescale font sizes.
.responsive-font-size(@fs, @important: false) {
  .rfs(@fs, @important);
}
