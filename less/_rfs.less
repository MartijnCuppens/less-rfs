// stylelint-disable declaration-property-value-blacklist

// RFS mixin.
//
// Automated font-resizing.
//
// See https://github.com/MartijnCuppens/rfs.

// Configuration.

// Minimum fontsize.
@rfs-minimum-font-size: 16px;
@rfs-font-size-unit: rem;

// Breakpoint at where font-size starts decreasing if screen width is smaller.
@rfs-breakpoint: 1200px;

// Resize font-size based on screen height and width.
@rfs-two-dimensional: true;

// Factor of decrease.
@rfs-factor: 5;

// Generate disable classes
@rfs-generate-disable-classes: false;

// 1 rem = @rfs-rem-value px.
@rfs-rem-value: 16;

// Disable RFS by setting @enable-responsive-font-sizes to false.
@enable-responsive-font-sizes: true;

// Responsive font-size mixin.
.rfs(@fs, @important: false) {

  & when (not(@important)) {
    .rfs-prefix(@fs, e(''));
  }

  & when (@important) {
    .rfs-prefix(@fs, e(' !important'));
  }
}

.rfs-prefix(@fs, @prefix) {

  & when ((not(isnumber(@fs)) and not(isunit(@fs, px)) and not(isunit(@fs, rem))) or (@fs = 0)) {
    font-size: @fs@prefix;
  }

  & when (((isnumber(@fs)) and (get-unit(@fs) = e(''))) or (isunit(@fs, px)) or (isunit(@fs, rem))) {
    .rfs-render-base(@fs, @prefix);
  }
}

.rfs-render-base(@fs, @prefix) {

  & when ((isnumber(@fs)) and (get-unit(@fs) = e(''))) {
    .rfs-render-base-number(@fs, @prefix);
  }

  & when ((isunit(@fs, px))) {
    .rfs-render-base-number((@fs/1px), @prefix);
  }

  & when ((isunit(@fs, rem))) {
    .rfs-render-base-number((@fs/.0625rem), @prefix);
  }
}

.rfs-render-base-number(@fs, @prefix) {

  & when (@rfs-font-size-unit = px) {
    font-size: @fs * 1px@prefix;
  }

  & when (@rfs-font-size-unit = rem) {
    font-size: @fs * .0625rem@prefix;
  }
}

// The responsive-font-size mixin uses RFS to rescale font sizes.
.responsive-font-size(@fs, @important: false) {
  .rfs(@fs, @important);
}
